// This sets us up for building a forge project - you need all of these
buildscript {
    repositories {
        // [HTTPS FIX] Replace mavenCentral() with the code block below
        maven {
            url "https://repo1.maven.org/maven2" 
        }
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

// [HTTPS FIX] Add the code block below
allprojects {
    repositories {
        all { ArtifactRepository repo ->
            if (repo instanceof MavenArtifactRepository){
                if (repo.url.toString().startsWith("http://repo1.maven.org/maven2")) {
                    repo.url = repo.url.toString().replace("http://", "https://")
                }
            }
        }
    }
}


// Apply the forge plugin - this adds all the magic for automatically obfuscating, deobfuscating etc
apply plugin: 'forge'

// This is our group
group = "codechicken" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
// This is our actual project within the group.
archivesBaseName = "CodeChickenLib"

// Define properties file
ext.configFile = file "gradle.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version =  "${project.config.mod_version}." + System.getenv("BUILD_NUMBER") ?: "1"

println  config.minecraft_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = config.minecraft_version + "-" + config.forge_version
}


// this sets our output jar to have a 'tag' of 'universal' on it
// It also adds the minecraft version in a custom version name
// The result is files named <projectname>-<mcversion>-<version>-universal.jar
jar {
    classifier = 'universal'
    version = "${project.minecraft.version}-${project.version}"
    manifest {
        attributes 'Main-Class': 'codechicken.lib.tool.Main'
    }

}
sourceSets {
	main {
		java {
			srcDir new File(project.projectDir.parentFile, "src")
		}
	}
}

// Add in a source jar for people, should they desire to download such a thing
task sourceJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'src'
    version = "${project.minecraft.version}-${project.version}"
}

// Add in an mcp named jar, for those who wish to run in a development environment (assuming mcp naming matches)
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
    version = "${project.minecraft.version}-${project.version}"
	manifest {
        attributes 'Main-Class': 'codechicken.lib.tool.Main'
    }

}

// Tell the artifact system about our extra jars
artifacts {
	archives sourceJar, deobfJar
}